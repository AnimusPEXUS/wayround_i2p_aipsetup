#!/usr/bin/python

# this is main aipsetup executable

import sys
import getopt
import os
import __builtin__



# default settings

etalon_aipsetup_config = {'homedir'  :'/usr/lib/aipsetup', # aipsetup
                          # home dir

                          'templates':'/usr/lib/aipsetup/templates', # aipsetup
                                                                     # templates
                          'editor'   : os.environ['VISUAL'],         # editor
                          'settings' :'/etc/aipsetup.conf'
                          }

aipsetup_config = etalon_aipsetup_config

# end of default settings

sys.path.append(aipsetup_config['homedir'])

try:
    import aipsetup_utils
except:
    print '-e- main utilities module load error in '+aipsetup_home_dir
    print '    please reinstall or reconfigure aipsetup'
    exit (1)


aipsetup_config = aipsetup_utils.get_configuration(aipsetup_config)
if (aipsetup_config == None):
    print '-e- file with settings not found ' + etalon_aipsetup_config['settings']
    exit (-1)



# modules_data contains information populated by modules. basicly it
# is an array, containing structures. each structure devides on few
# fields.
#
#  modules_data = [['module name', 'module group', ['mode', 'names'], 'help text'],
#                  ['module name', 'module group', ['mode', 'names'], 'help text'],
#                  ['module name', 'module group', ['mode', 'names'], 'help text'],
#                  ...]

modules_data = []





####### aipsetup_* modules import section
# try:
import aipsetup_none
import aipsetup_templates
# except:
#     print '-e- can not load one of the aipsetup_* modules'
#     print '    please reinstall or reconfigure aipsetup'
#     exit (1)
####### END aipsetup_* modules import section



# flag to check aipsetup_none module is present
mode_none_present = False


# here will be placed valid mode list
mode_list = []


# mode selector
mode_select = 'none'


# default module to start
module_to_run = 'aipsetup_none'


# flag to check existing mode selected
correct_mode_selected = False


# generate all modules mode list to verify -m option (populate
# mode_list)
for i in modules_data:
    for j in i[2]:

        if j == 'none':
            # 'none module/mode must allways be'
            mode_none_present = True


if not mode_none_present:
    print '-e- module ' + module_to_run + ' not loaded'
    exit (-1)

for i in modules_data:
    for j in i[2]:
        mode_list.append(j)


arguments = sys.argv[1:]

# working with first argument
if len(arguments) > 0:
    if arguments[0] == '-m':
        if len(arguments) > 1:
            mode_select = arguments[1]
            del arguments[:2]
        else:
            print '-e- -m option must have the value'
            exit (-1)

    else:
        mode_select = 'none'



for i in modules_data:
    for j in i[2]:
        if mode_select == j:
            correct_mode_selected = True
            module_to_run = i[0]


if not correct_mode_selected:
    print """\
-e- incorrect mode selected or module for this mode not installed. see --help"""
    exit (-1)

module_to_run_imported = __builtin__.__import__(module_to_run)

module_to_run_imported.run(aipsetup_config,
                           arguments)

exit(0)
