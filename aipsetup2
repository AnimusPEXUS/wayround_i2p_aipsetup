#!/usr/bin/python

# this is main aipsetup executable

import sys
import getopt
import __builtin__

# defaults

aipsetup_home_dir = '/usr/lib/aipsetup'
aipsetup_template_dir = aipsetup_home_dir+'/template'
aipsetup_editor= 'usr/bin/emacs'

# end of defaults

sys.path.append(aipsetup_home_dir)

try:
    import aipsetup_utils
except:
    print '-e- main utilities module load error in '+aipsetup_home_dir
    print '    please reinstall or reconfigure aipsetup'
    exit (1)

# modules_data contains information populated by modules. basicly it
# is an array, containing structures. each structure devides on few
# fields:
#
#  modules_data=[['plugin name', 'module group', ['mode', 'names'], ['s', 'h', 'o', 'r', 't', 'p', 'i', 'n', 's'], ['long', 'options'],'help text'],
#                ['plugin name', 'module group', ['mode', 'names'], ['s', 'h', 'o', 'r', 't', 'p', 'i', 'n', 's'], ['long', 'options'],'help text'],
#                ['plugin name', 'module group', ['mode', 'names'], ['s', 'h', 'o', 'r', 't', 'p', 'i', 'n', 's'], ['long', 'options'],'help text'],
#                ...]
modules_data=[]

####### aipsetup_* modules import section
# try:
import aipsetup_none
import aipsetup_edit
# except:
#     print '-e- can not load one of the aipsetup_* modules'
#     print '    please reinstall or reconfigure aipsetup'
#exit (1)
####### END aipsetup_* modules import section
    
# flag to check aipsetup_none module is present
mode_none_present=False

# generate all modules mode list to verify -m option
mode_list=[]
for i in modules_data:
    for j in i[2]:
        if j=='none':
            # 'none module/mode must allways be'
            mode_none_present=True
        mode_list.append(j)

if not mode_none_present:
    print '-e- module \'none\' not loaded'
    exit (-1)

# mode selector. default mode can be changed here, but this is not
# recommended
mode_select='none'

# help mode will be transmited to selected module
show_help=False

# default module to start
module_to_run='aipsetup_none'

# flag to check existing mode selected
correct_mode_selected=False

arguments=sys.argv[1:]

if len(arguments) > 0:
    if arguments[0]=='-m':
        if len(arguments) > 1:
            mode=arguments[1]
            del arguments[:2]
        else:
            print '-e- -m option must have a value'
            exit (-1)
    elif arguments[0]=='--help':
        show_help=True
        del arguments[:1]
    elif arguments[0]=='--version':
        aipsetup_utils.show_version_message()
        exit (0)
    else:
        print """\
-e- first argument must! be an option -m with value, --help or --version.
    Not either"""
        exit(-1)

for i in modules_data:
    for j in i[2]:
        if mode_select==j:
            correct_mode_selected=True
            module_to_run=i[0]

if not correct_mode_selected:
    print '-e- incorrect mode selected or module for this mode not installed. see --help'
    exit (-1)

module_to_run_imported = __builtin__.__import__(module_to_run)

module_to_run_imported.run(show_help, arguments)

exit(0)

"""
	    escript | esc)
		if [ -z "$VISUAL" ]
		then
		    echo " VISUAL not defined"
		    exit 1
		fi
		if [ -z "$2" ]
		then
		    "$VISUAL" "$AIP_DIR/_aipb_script"
		else
		    if [ ! -f "$AIP_DIR/templates/$2" ]
		    then
			cp "$AIP_DIR/templates/usr" "$AIP_DIR/templates/$2"
		    fi
		    "$VISUAL" "$AIP_DIR/templates/$2"
		    size="`stat -c '%s' \"$AIP_DIR/templates/$2\"`" 2> /dev/null
		    if [ "$size" -lt 10 ]
		    then
			echo "resulting file size < 10. it's a sign to remove it"
			rm -v "$AIP_DIR/templates/$2"
		    fi

		    if [ "$2" != 'usr' ]
		    then
			md51="`md5sum -b \"$AIP_DIR/templates/usr\" | sed -e 's/\ .*//'`" 2> /dev/null
			md52="`md5sum -b \"$AIP_DIR/templates/$2\" | sed -e 's/\ .*//'`" 2> /dev/null
			if [ "$md51" = "$md52" ]
			then
			    echo "resulting file md5 = usr file md5. it's a sign to remove it"
			    rm -v "$AIP_DIR/templates/$2"
			fi
		    fi
		fi
		exit $?
		;;
	    script | sc)
		shift
		bash "$AIP_DIR/_aipb_script" $*
		exit $?
		;;
	    bd | build)
		shift
		bash "$AIP_DIR/_aipb_build" $*
		exit $?
		;;
	    pksums | pks)
		shift
		bash "$AIP_DIR/_aipb_pksums " $*
		exit $?
		;;
	    lnfix | lf)
		shift
		bash "$AIP_DIR/_aipb_slinksa2r" $*
		exit $?
		;;
	    pack | pk)
		shift
		bash "$AIP_DIR/_aipb_pack" $*
		exit $?
		;;

	    cscript | csc)
		rm -rv ./templates
		cp -vur "$AIP_DIR/templates" .
		exit 0
		;;

	    list | ls)
		shift
		set -f
		bash "$AIP_DIR/_aipb_list" $*
		set +f
		exit $?
		;;
	    listc | lsc)
		shift
		set -f
		bash "$AIP_DIR/_aipb_list_cont" $*
		set +f
		exit $?
		;;
	    pkcheck | chk)
		shift
		set -f
		bash "$AIP_DIR/_aipb_checksums" $*
		set +f
		exit $?
		;;
	    remove | rm)
		shift
		set -f
		bash "$AIP_DIR/_aipb_remove" $*
		set +f
		exit $?
		;;
	    install | 'in')
		shift
		bash "$AIP_DIR/_aipb_install" $*
		;;
	    findcom | fn)
		shift
		bash "$AIP_DIR/_aipb_fpbf" $*
		exit $?
		;;
	    finddep | fd)
		shift
		bash "$AIP_DIR/_aipb_finddeps" $*
		exit $?
		;;
	    lddsums | 'ldd')
		shift
		bash "$AIP_DIR/_aipb_lddsums" $*
		exit $?
		;;
	    bz2xzsys )
		shift
		bash "$AIP_DIR/_aipb_move_bzip2_to_xz" $*
		exit $?
		;;
	    bz2xzpkg )
		shift
		bash "$AIP_DIR/_aipb_move_bzip2_to_xz_pk" $*
		exit $?
		;;

	    extract | ex)
		shift
		bash "$AIP_DIR/_aipb_extract" $*
		exit $?
		;;
	    nameparse | np)
		shift
		bash "$AIP_DIR/_aipb_pkgnameparse" $*
		exit $?
		;;
	    listuniq | lu)
		shift
		bash "$AIP_DIR/_aipb_pkgnamelistuniq" $*
		exit $?
		;;
	    pvc | pkgnamevcomp)
		shift
		bash "$AIP_DIR/_aipb_pkgnamevcompare" $*
		exit $?
		;;
	    llu|pkgnamelstlat)
		shift
		bash "$AIP_DIR/_aipb_pkgnamelistalllatestuniq" $*
		exit $?
		;;
	    slp|slashescape)
		shift
		bash "$AIP_DIR/_aipb_slashescape" $*
		exit $?
		;;
	    cat0|catzero)
		shift
		bash "$AIP_DIR/_aipb_catzero" $*
		exit $?
		;;
	    sfi|softfix)
		shift
		bash "$AIP_DIR/_aipb_fixsoftlinks" $*
		exit $?
		;;
"""

exit(0)
