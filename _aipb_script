#!/bin/bash

if [ ! -d "$AIP_DIR" ]
then
    echo " SORRY: please, install aipsetup (if not yet), "
    echo "        and run this from main program (aipsetup)"
    echo " ERROR: AIP_DIR not set"
    exit 1
fi

searchtargets() {   
    t=`pwd`
    cd "$AIP_DIR/templates"
    TARGETS=`find . -type f ! -name '*~' -exec bash -c "echo \"{}\" | sed -e \"s/^.\///g\" " ';' | sort `
#     for i in $TARGETS
#     do
# 	t="$t $i"
#     done
#     TARGETS=$t
    cd "$t"
    unset t
}

# used also as a template
cleanall() {
    unset PACKAGENAME	       # [string] if not set - determined from
			       # parent dirname
    unset PACKAGENAMESUFIX     # [string] suffix to pkg name,
			       # e.g. ``date '+%Y%m%d%H%M%S'`-i486-pc-linux-gnu'
    unset SEPARATEDIR	       # [0,1] dir there to do all work
    unset RELATIVE	       # [string] dir relatively to which
			       # "configure" are; in samba it is
			       # `./source'. if in current then just
			       # `./'
    

# steps necessary to achieve required goal
    i=0
    while [ $i -ne 256 ]
    do
	unset RUN[$i]		# [string] command
	unset RELATIVELY[$i]	# [0,1] this command required to be
				# started in source directory in case
				# of outsource building
	unset ERRORMESSAGE[$i]	# [string] error message in case of
				# fault
	unset EXITONERROR[$i]	# [0,1] if error then farther steps
				# are useless
	i=$(( $i + 1 ))
    done
}


looform_start=1
looform_index=0
looform() {
    if [ "$looform_start" -eq 1 ]
    then
	looform_index=0
	looform_start=0
    fi
    # add command
    CMD="${RUN[$looform_index]}"

    # add path to file in source tree
    #???     CMD="$RELATIVE/$CMD"

    # add full path in case of outsource building
    if [ "$SEPARATEDIR" -eq 1 ]
    then
	if [ "${RELATIVELY[$looform_index]}" -eq 1 ]
	then
	    CMD="\$bs_run_dir/$RELATIVE/$CMD"
	fi
    else
	if [ "${RELATIVELY[$looform_index]}" -eq 1 ]
	then
#	    CMD="$RELATIVE/$CMD"
	    CMD="./$CMD"
	fi
    fi

    
    cat <<EOF >> ./_tnbuild_$form_p1
echo -e '==EXECUTING=======[\e[47m\e[30m$CMD\e[0m]' | tee -a "\$bs_buildlogfile" 
EOF

    cat <<EOF >> ./_tnbuild_$form_p1
#sleep 3
echo -e '\e[32m\n'
set -o pipefail
$CMD 2>&1 | tee -a "\$bs_buildlogfile"
e=\$?
set +o pipefail
echo "===>command exit code===> \"\$e\""  2>&1 | tee -a "\$bs_buildlogfile"
EOF


    cat <<EOF >> ./_tnbuild_$form_p1
echo -e '\e[0m'
EOF

    if [ "${EXITONERROR[$looform_index]}" -eq 1 ]
    then
	cat << EOF >> ./_tnbuild_$form_p1
if [ \$e -eq 0 ]
then
EOF
    fi

    t=$(( $looform_index + 1 ))
    if [ ! -z "${RUN[$t]}" ]
    then
	looform_index=$(( $looform_index + 1 ))
	looform
	looform_index=$(( $looform_index - 1 ))
    else
	cat << EOF >> ./_tnbuild_$form_p1
echo -e "\e[1mall complete\e[0m" | tee -a "\$bs_buildlogfile"
EOF
    fi

    if [ "${EXITONERROR[$looform_index]}" -eq 1 ]
    then
	cat <<EOF >> ./_tnbuild_$form_p1
else
echo -e "\e[31m${ERRORMESSAGE[$looform_index]}\e[0m" | tee -a "\$bs_buildlogfile" 
exit 1
fi
EOF
    fi
}

form_p1=
form () {
    if [ -z "$form_p1" ]
    then
	echo "error: form parameter empty"
	return 1
    fi
    
    cleanall
    grep -qe "^$form_p1\(\)" "$AIP_DIR/templates/$form_p1"
    if [ "$?" -ne 0 ]
    then
	echo "(error: '$form_p1' template format is bad)"
	return 1
    fi
    
    source "$AIP_DIR/templates/$form_p1"
    $form_p1

    cat << EOF > ./_tnbuild_$form_p1
#!/bin/bash
#####  Builder script for $form_p1

#####  WARNING! This file is generated by aipsetup, make changes in
#####  template files, not in this file

#####  Settings where following:
# \$PACKAGENAME==$PACKAGENAME
# \$PACKAGENAMESUFIX==$PACKAGENAMESUFIX
# \$SEPARATEDIR==$SEPARATEDIR
# \$RELATIVE==$RELATIVE
# \$LOGALL==$LOGALL

EOF
    i=0
    while [ "${RUN[$i]}" != "" ]
    do
	cat <<EOF >> ./_tnbuild_$form_p1
# \$RUN[$i]==${RUN[$i]}
# \$RELATIVELY[$i]==${RELATIVELY[$i]}
# \$ERRORMESSAGE[$i]==${ERRORMESSAGE[$i]}
# \$EXITONERROR[$i]==${EXITONERROR[$i]}
EOF
	i=$(( $i + 1 ))	
    done

    cat <<EOF >> ./_tnbuild_$form_p1

# Building notes:
EOF
    if [ "$SEPARATEDIR" -eq 1 ]
    then
	cat << EOF >> ./_tnbuild_$form_p1
#   * All actions will be done in separate directory "../build"
EOF
    else
	cat << EOF >> ./_tnbuild_$form_p1
#   * All actions will be done in current directory
EOF
    fi

    cat << EOF >> ./_tnbuild_$form_p1
#   * Command running relatively to source dir "$SEPARATEDIR"

EOF

    cat << EOF >> ./_tnbuild_$form_p1
# constants:
#   bs_run_dir      - dir in which script was started
#   bs_pkg_sufix    - package sufix
#   bs_pkg_name     - package name, this used then creating
#                     \$bs_install_dir and tar package
#   bs_parent_dir   - parent dir of \$bs_run_dir
#   bs_build_dir    - \$bs_parent_dir/build
#   bs_install_dir  - \$bs_parent_dir/\$bs_pkg_name-\$PACKAGENAMESUFIX
#   bs_buildlogfile - file, where will be all logs be placed

# constants implementation:
bs_run_dir="\`pwd\`"
bs_parent_dir="\`dirname "\$bs_run_dir"\`"
EOF

    if [ -z "$PACKAGENAME" ]
    then
	cat <<EOF >> ./_tnbuild_$form_p1
bs_pkg_name="\`basename \$bs_run_dir\`-$PACKAGENAMESUFIX"
EOF
    else
	cat <<EOF >> ./_tnbuild_$form_p1
bs_pkg_name="$PACKAGENAME-$PACKAGENAMESUFIX"
EOF
    fi
    cat <<EOF >> ./_tnbuild_$form_p1
bs_pkg_sufix="$PACKAGENAMESUFIX"
EOF
    
    if [ "$SEPARATEDIR" -eq 1 ]
    then
	cat <<EOF >> ./_tnbuild_$form_p1
bs_build_dir="\$bs_parent_dir/build"
EOF
    else
	cat <<EOF >> ./_tnbuild_$form_p1
bs_build_dir="\$bs_run_dir/$RELATIVE"
EOF
    fi

    cat <<EOF >> ./_tnbuild_$form_p1
bs_install_dir="\$bs_parent_dir/\$bs_pkg_name"
bs_buildlogfile="\$bs_install_dir/var/log/packages/buildlogs/\$bs_pkg_name"

# operations:
mkdir -p "\`dirname \"\$bs_buildlogfile\"\`"
EOF
   
    cat <<EOF >> ./_tnbuild_$form_p1
echo -e "Building       \e[1m\$bs_pkg_name\e[0m" | tee -a "\$bs_buildlogfile" 
echo -e " Name sufix    \$bs_pkg_sufix" | tee -a "\$bs_buildlogfile"
echo -e " Start dir     \$bs_run_dir" | tee -a "\$bs_buildlogfile"
echo -e " Parent dir    \$bs_parent_dir" | tee -a "\$bs_buildlogfile"
echo -e " Source dir    \$bs_run_dir/$RELATIVE" | tee -a "\$bs_buildlogfile"
echo -e " Build dir     \$bs_build_dir" | tee -a "\$bs_buildlogfile"
echo -e " Install dir   \$bs_install_dir" | tee -a "\$bs_buildlogfile"
echo -e " Logging to    \$bs_buildlogfile" | tee -a "\$bs_buildlogfile"

echo
echo "\$bs_install_dir" > "\$bs_parent_dir/lastresultdir"
unset count
EOF
    
    if [ "$SEPARATEDIR" -eq 1 ]
    then
	cat <<EOF >> ./_tnbuild_$form_p1
echo "cleaning build dir..."
rm -r "\$bs_build_dir" > /dev/null 2>&1
mkdir -p "\$bs_build_dir" > /dev/null 2>&1
cd "\$bs_build_dir" > /dev/null 2>&1
EOF
    else
	cat <<EOF >> ./_tnbuild_$form_p1

cd "\$bs_build_dir"
EOF
	
    fi

    looform_start=1
    
    looform
    cat <<EOF >> ./_tnbuild_$form_p1

bzip2 -9 "\$bs_buildlogfile"
exit 0
EOF
    
    chmod 700 ./_tnbuild_$form_p1
    
    return 
}

make_script_p1=
make_script () {
    if [ -z "$make_script_p1" ]
    then
	echo "*** wrong make script parameter"
	return 1
    fi
    form_p1=$make_script_p1
    form
}

if [ "$1" = "--help" ]
then
    echo -e "usage: aipsetup sc [options | TRAGETS]"
    echo
    echo -e "\t--list       list all builtin targets"
    echo -e "\t--all        make all targets"
    exit 0
fi
searchtargets

GENERATE=
NGENERATE=
FOUND=0
case "$#" in
    0)
	echo "not enough parameters, use --help"
	exit 0
	;;
    *)
	for i in $*
	do
	case "$i" in
	    --list)
		echo $TARGETS
		exit 0
		;;
	    --all)
		GENERATE=$TARGETS
		break;
		;;
	    *)
		FOUND=0
		for j in $TARGETS
		do
		    if [ $i == $j ]
		    then
			GENERATE="$GENERATE $i"
			FOUND=1
			break
		    fi
		done
		if [ "$FOUND" -eq 0 ]
		then
		    NGENERATE="$NGENERATE $i"
		fi
		;;
	esac
	done
	;;

esac
if [ ! -z "$NGENERATE" ]
then
    echo -e "Not found:\n$NGENERATE"
fi
echo -e "Writing:"
for z in $GENERATE
do
    echo -n " $z"
    make_script_p1=$z
    make_script
done
echo
exit 0
