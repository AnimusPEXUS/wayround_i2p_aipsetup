#!/usr/bin/python2.6
# -*- coding: utf-8 -*-

import os.path
import os

import lxml

from mako.template import Template
from mako import exceptions

SAMPLE_PACKAGE_INFO_STRUCTURE = dict(
    # not required, but can be usefull
    homepage="http://wayround.org",
    # description
    description='',
    # this can be used for finding newer software versions (url list)
    sources=[],
    # url list
    mirrors = [],
    # 'standard', 'local' or other package name
    pkg_name_type = 'standard',
    #
    regexp = 'aipsetup-(\d)*\.tar.(xz|gz|bz2|lzma)',
    # string list
    tags = []
    )

pkg_info_file_template = """\
<package>

  <!-- This file is generated by aipsetup -->

  <nametype value="${ pkg_name_type | x}" />
  <regexp value="${ regexp | x}" />

  <description>${ description | x}</description>
  <homepage url="${ homepage | x}"/>

  <!-- Use <source url="" /> constructions for listing
       possible sources -->
  % for i in sources:
  <source url="${ i | x}" />
  % endfor

  <!-- Use <mirror url="" /> constructions for listing
       possible mirrors -->
  % for i in mirrors:
  <mirror url="${ i | x}" />
  % endfor

  <!-- Use <tag url="" /> constructions for listing
       tags -->
  % for i in tags:
  <tag value="${ i | x}"/>
  % endfor

</package>
"""


def read_from_file(name):
    pass

def write_to_file(name, struct):

    ret = 0

    txt = Template(text=pkg_info_file_template).render(
        pkg_name_type = struct['pkg_name_type'],
        regexp = struct['regexp'],
        description = struct['description'],
        homepage = struct['homepage'],
        sources = struct['sources'],
        mirrors = struct['mirrors'],
        tags = struct['tags']
        )

    try:
        f = open(name, 'w')
        f.write(txt)
        f.close()
    except:
        ret = 1

    return ret
